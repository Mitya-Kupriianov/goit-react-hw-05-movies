{"version":3,"file":"static/js/840.b88b5ce7.chunk.js","mappings":"yNAEaA,EAAYC,EAAAA,GAAAA,GAAH,4JAQTC,EAAcD,EAAAA,GAAAA,GAAH,0IASXE,EAAYF,EAAAA,GAAAA,GAAH,0HAOTG,EAAMH,EAAAA,GAAAA,IAAH,yD,SCvBHI,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpBC,GAAWC,EAAAA,EAAAA,MAGjB,OADAC,QAAQC,IAAIJ,IAEV,SAACN,EAAD,iBACGM,QADH,IACGA,OADH,EACGA,EAAUK,KAAI,SAAAC,GAAK,OAClB,SAACV,EAAD,WACE,UAAC,KAAD,CAAMW,GAAE,yBAAaD,QAAb,IAAaA,OAAb,EAAaA,EAAOE,IAAMC,MAAO,CAAEC,KAAMT,GAAjD,WACE,SAACH,EAAD,CAAKa,IAAG,UAPN,mCAOM,cAAWL,QAAX,IAAWA,OAAX,EAAWA,EAAOM,eAAiBC,IAAI,MAC/C,SAAChB,EAAD,iBAAYS,QAAZ,IAAYA,OAAZ,EAAYA,EAAOQ,YAHvB,OAAkBR,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAOE,GADP,KAUzB,C,+ICjBYO,EAAOpB,EAAAA,GAAAA,KAAH,0MAUJqB,EAAQrB,EAAAA,GAAAA,MAAH,yUAiBLsB,EAAStB,EAAAA,GAAAA,OAAH,iO,SCUnB,EAnCe,SAAC,GAAwB,IAAtBuB,EAAqB,EAArBA,eAChB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAcA,OACE,+BACE,UAACN,EAAD,CAAMO,SAVW,SAAAC,GACnBA,EAAEC,iBACGJ,EAAMK,QAGXP,EAAeE,EAChB,EAIG,WACE,SAACH,EAAD,sBACA,SAACD,EAAD,CACEU,KAAK,OACLC,SAlBY,SAAAJ,GAClBF,EAASE,EAAEK,OAAOC,MAAMC,cACzB,EAiBOC,aAAa,MACbC,WAAS,EACTC,YAAY,sBAKrB,E,oBCGD,EA7Be,WAAO,IAAD,EAEnB,GAA4Bd,EAAAA,EAAAA,UAAS,IAArC,eAAOe,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAEjDC,EAAAA,EAAAA,YAAU,WACJF,IACFG,EAAAA,EAAAA,IAAaH,GAAaI,MAAK,SAAAC,GAAO,OAAIT,EAAUS,EAAd,GAEzC,GAAE,CAACL,IAEJ,IAIMM,EAAWX,EAAOY,QAAO,SAAAxC,GAAK,OAClCA,EAAMQ,MAAMgB,cAAciB,SAASR,EAAYT,cADb,IAIpC,OACE,UAACkB,EAAA,EAAD,CAAKC,GAAG,UAAUC,GAAI,GAAtB,WACE,SAAC,EAAD,CAAQhC,eAVS,SAAAW,GACnBS,EAA0B,KAAVT,EAAe,CAAET,MAAOS,GAAU,CAAC,EACpD,KASG,SAAC9B,EAAA,EAAD,CAAWC,SAAU6C,KACrB,SAAC,KAAD,MAGL,C","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/Search/Search.styled.js","components/Search/Search.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 20px;\n  padding: 0;\n  margin: 0px auto;\n`;\n\nexport const CardWrapper = styled.li`\n  border: 1px solid black;\n  border-radius: 4px;\n  list-style: none;\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n  text-align: center;\n`;\nexport const Img = styled.img`\n  width: 100%;\n  height: auto;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { Container, CardWrapper, MovieName, Img } from './MovieList.styled';\n\nexport const MovieList = ({ products }) => {\n  const location = useLocation();\n  const IMG = 'https://image.tmdb.org/t/p/w500';\n  console.log(products);\n  return (\n    <Container>\n      {products?.map(movie => (\n        <CardWrapper key={movie?.id}>\n          <Link to={`/movies/${movie?.id}`} state={{ from: location }}>\n            <Img src={`${IMG}${movie?.backdrop_path}`} alt=\"\" />\n            <MovieName>{movie?.title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: baseline;\n  width: 100%;\n  max-width: 400px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-bottom: 20px;\n  background-color: #fff;\n`;\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border-right: none;\n  border-top: none;\n  border-left: none;\n  border-bottom-color: orangered;\n  outline: none;\n  padding: 8px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n    color: orangered;\n  }\n`;\nexport const Button = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: none;\n  color: black;\n  background-color: initial;\n  cursor: pointer;\n  outline: none;\n  :hover {\n    color: orangered;\n  }\n`;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button } from './Search.styled';\n\nconst Search = ({ onSubmitMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleQuery = e => {\n    setQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!query.trim()) {\n      return;\n    }\n    onSubmitMovies(query);\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Button>Search</Button>\n        <Input\n          type=\"text\"\n          onChange={handleQuery}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n      </Form>\n    </>\n  );\n};\n\nSearch.propTypes = {\n  onSubmitMovies: PropTypes.func.isRequired,\n};\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams, Outlet } from 'react-router-dom';\nimport { searchMovies } from '../service/api';\nimport Search from '../components/Search/Search';\nimport { MovieList } from '../components/MovieList/MovieList';\nimport Box from '../components/Box';\n\nconst Movies = () => {\n  //state search movies\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryParams = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (queryParams) {\n      searchMovies(queryParams).then(results => setMovies(results));\n    }\n  }, [queryParams]);\n\n  const filterMovies = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  const onMovies = movies.filter(movie =>\n    movie.title.toLowerCase().includes(queryParams.toLowerCase())\n  );\n\n  return (\n    <Box as=\"section\" pl={20}>\n      <Search onSubmitMovies={filterMovies} />\n      <MovieList products={onMovies} />\n      <Outlet />\n    </Box>\n  );\n};\n\nexport default Movies;\n"],"names":["Container","styled","CardWrapper","MovieName","Img","MovieList","products","location","useLocation","console","log","map","movie","to","id","state","from","src","backdrop_path","alt","title","Form","Input","Button","onSubmitMovies","useState","query","setQuery","onSubmit","e","preventDefault","trim","type","onChange","target","value","toLowerCase","autoComplete","autoFocus","placeholder","movies","setMovies","useSearchParams","searchParams","setSearchParams","queryParams","get","useEffect","searchMovies","then","results","onMovies","filter","includes","Box","as","pl"],"sourceRoot":""}